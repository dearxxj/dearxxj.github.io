<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bioinfo on Fan&#39;s Blog</title>
    <link>https://dearxxj.github.io/tags/bioinfo/</link>
    <description>Recent content in Bioinfo on Fan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 03 Nov 2019 20:59:30 -0600</lastBuildDate>
    
	<atom:link href="https://dearxxj.github.io/tags/bioinfo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Demystify Hi-C Data Normalization</title>
      <link>https://dearxxj.github.io/post/6/</link>
      <pubDate>Sun, 03 Nov 2019 20:59:30 -0600</pubDate>
      
      <guid>https://dearxxj.github.io/post/6/</guid>
      <description>Hi-C is a sequencing-based method for profiling the genome-wide chromatin contacts. It has been widely used in studying various biological questions such as gene regulation, chromatin structures, genome assembly, etc. The Hi-C experiments involves a series of biochemistical reactions that may introduce noises to the output. Subsequent data analysis such as read mapping also give rise to noises that affect the interpretation of the final output: a contact matrix, where each element in the matrix denotes the contact strength between any two regions of genome.</description>
    </item>
    
    <item>
      <title>Learning HTSlib (1)</title>
      <link>https://dearxxj.github.io/post/5/</link>
      <pubDate>Sun, 07 Apr 2019 20:36:43 -0400</pubDate>
      
      <guid>https://dearxxj.github.io/post/5/</guid>
      <description>In the past week, I&amp;rsquo;ve been adapting my own HiC pipeline to the 4DN recommended pipeline. One critical step is to convert hundreds of read-paired BAM files generated by my old pipeline to pairs format. 4DN consortium provides a tool, bam2pairs, for this task. It&amp;rsquo;s basically a Perl script that calls Samtools to read a BAM file and output targeted fields. Because the pair format suggests the columns to be sorted by chr1-chr2-pos1-pos2, bam2pairs then calls Linux &amp;ldquo;sort&amp;rdquo; to perform four times of sorting based on these four columns [1].</description>
    </item>
    
    <item>
      <title>Exact string matching algorithms: Boyer-Moore and KMP</title>
      <link>https://dearxxj.github.io/post/4/</link>
      <pubDate>Fri, 28 Dec 2018 20:42:32 -0500</pubDate>
      
      <guid>https://dearxxj.github.io/post/4/</guid>
      <description>String matching algorithms are used in lots of scenarios such as searching words in a text file, or locating specific sequences in a genome. I&amp;rsquo;ve heard of KMP algorithm long time ago, but don&amp;rsquo;t have a chance to implement it by myself (just lazy). It seems that KMP is not widely used in genomics field, but instead another algorithm, Boyer-Moore, is taught more often in computational genomics classes. I recently find a great online tutorial on computational genomics by Ben Langmead @JHU (link).</description>
    </item>
    
    <item>
      <title>How does number of threads affect mapping time in BWA MEM</title>
      <link>https://dearxxj.github.io/post/2/</link>
      <pubDate>Wed, 09 Aug 2017 19:42:02 -0400</pubDate>
      
      <guid>https://dearxxj.github.io/post/2/</guid>
      <description>I&amp;rsquo;ve been using BWA MEM a lot recently for mapping short reads from whole genome sequencing or HiC experiments. Mapping high coverage sequencing data is a time-consuming task. The easiest way to accelerate, especially on servers, is to use multiple threads which is done by adding the -t flag. I&amp;rsquo;ve seen my labmates use 20 threads, 32 threads, or 40 threads. There seem to be no offical suggestions on the number of threads that would make the mapping fastest.</description>
    </item>
    
  </channel>
</rss>